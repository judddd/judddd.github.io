[{"content":" # 参考项目 xh-middleware\n# trace # TracerProvider 主要负责创建Tracer\n# Tracer 表示一次完整的追踪链路,由一个或多个span组成,创建方法如下\n1 gtrace.NewTracer(tracerName) # Span Span是一条追踪链路中的基本组成要素，一个span表示一个独立的工作单元，比如可以表示一次函数调用，一次http请求等等。span会记录如下基本要素,创建方法如下\n1 gtrace.NewSpan(ctx, spanName, opts...) # Attributes Attributes以K/V键值对的形式保存用户自定义标签，主要用于链路追踪结果的查询过滤。例如： http.method=\u0026ldquo;GET\u0026rdquo;,http.status_code=200。其中key值必须为字符串，value必须是字符串，布尔型或者数值型。 span中的Attributes仅自己可见，不会随着 SpanContext传递给后续span。 设置Attributes方式例如：\n1 2 3 4 span.SetAttributes( label.String(\u0026#34;http.remote\u0026#34;, conn.RemoteAddr().String()), label.String(\u0026#34;http.local\u0026#34;, conn.LocalAddr().String()), ) # Events Events与Attributes类似，也是K/V键值对形式。与Attributes不同的是，Events还会记录写入Events的时间，因此Events主要用于记录某些事件发生的时间。Events的key值同样必须为字符串，但对value类型则没有限制。例如：\n1 2 3 4 5 span.AddEvent(\u0026#34;http.request\u0026#34;, trace.WithAttributes( label.Any(\u0026#34;http.request.header\u0026#34;, headers), label.Any(\u0026#34;http.request.baggage\u0026#34;, gtrace.GetBaggageMap(ctx)), label.String(\u0026#34;http.request.body\u0026#34;, bodyContent), )) # SpanContext SpanContext携带着一些用于跨服务通信的（跨进程）数据，主要包含：\n足够在系统中标识该span的信息，比如：span_id, trace_id\nBaggage - 为整条追踪连保存跨服务（跨进程）的K/V格式的用户自定义数据。Baggage 与 Attributes 类似，也是 K/V 键值对。与 Attributes 不同的是,其key跟value都只能是字符串格式\nBaggage不仅当前span可见，其会随着SpanContext传递给后续所有的子span。要小心谨慎的使用Baggage - 因为在所有的span中传递这些K,V会带来不小的网络和CPU开销\n# Propagator Propagator传播器用于端对端的数据编码/解码，例如：Client到Server端的数据传输，TraceId、SpanId和Baggage也是需要通过传播器来管理数据传输。业务端开发者往往对Propagator无感知，只有中间件/拦截器的开发者需要知道它的作用。OpenTelemetry的标准协议实现库提供了常用的TextMapPropagator，用于常见的文本数据端到端传输。此外，为保证TextMapPropagator中的传输数据兼容性，不应当带有特殊字符，具体请参考：https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md,xh-middleware使用全局进行定义\n1 2 3 4 5 // defaultTextMapPropagator is the default propagator for context propagation between peers. defaultTextMapPropagator = propagation.NewCompositeTextMapPropagator( propagation.TraceContext{}, propagation.Baggage{}, ) # jager部署 http://localhost:16686\n1 2 3 4 5 6 7 8 9 10 11 12 13 docker run --rm --name jaeger \\ -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 4317:4317 \\ -p 4318:4318 \\ -p 14250:14250 \\ -p 14268:14268 \\ -p 14269:14269 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.55 # 单体函数示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func main() { const ( serviceName = \u0026#34;otlp-http-client\u0026#34; endpoint = \u0026#34;tracing-analysis-dc-hz.aliyuncs.com\u0026#34; path = \u0026#34;adapt_******_******/api/otlp/traces\u0026#34; ) // 自动生成traceID var ctx = gctx.New() shutdown, err := otlphttp.Init(serviceName, endpoint, path) if err != nil { g.Log().Fatal(ctx, err) } defer shutdown() ctx, span := gtrace.NewSpan(ctx, \u0026#34;main\u0026#34;) defer span.End() // Trace 1. user1 := GetUser(ctx, 1) g.Dump(user1) // Trace 2. user100 := GetUser(ctx, 100) g.Dump(user100) } 方法间创建\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // GetUser retrieves and returns hard coded user data for demonstration. func GetUser(ctx context.Context, id int) g.Map { ctx, span := gtrace.NewSpan(ctx, \u0026#34;GetUser\u0026#34;) defer span.End() m := g.Map{} gutil.MapMerge( m, GetInfo(ctx, id), GetDetail(ctx, id), GetScores(ctx, id), ) return m } // GetInfo retrieves and returns hard coded user info for demonstration. func GetInfo(ctx context.Context, id int) g.Map { ctx, span := gtrace.NewSpan(ctx, \u0026#34;GetInfo\u0026#34;) defer span.End() if id == 100 { return g.Map{ \u0026#34;id\u0026#34;: 100, \u0026#34;name\u0026#34;: \u0026#34;john\u0026#34;, \u0026#34;gender\u0026#34;: 1, } } return nil } // GetDetail retrieves and returns hard coded user detail for demonstration. func GetDetail(ctx context.Context, id int) g.Map { ctx, span := gtrace.NewSpan(ctx, \u0026#34;GetDetail\u0026#34;) defer span.End() if id == 100 { return g.Map{ \u0026#34;site\u0026#34;: \u0026#34;https://goframe.org\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@goframe.org\u0026#34;, } } return nil } // GetScores retrieves and returns hard coded user scores for demonstration. func GetScores(ctx context.Context, id int) g.Map { ctx, span := gtrace.NewSpan(ctx, \u0026#34;GetScores\u0026#34;) defer span.End() if id == 100 { return g.Map{ \u0026#34;math\u0026#34;: 100, \u0026#34;english\u0026#34;: 60, \u0026#34;chinese\u0026#34;: 50, } } return nil } ","date":"2024-04-22T16:22:49+08:00","permalink":"http://localhost:1313/p/golang-%E4%B8%AD%E9%97%B4%E4%BB%B6/","title":"golang-中间件"},{"content":" # 参考 https://github.com/benthosdev/benthos pipeline\nhttps://github.com/reugn/go-streams/tree/master stream\ngithub.com/ory/dockertest/v3\n/Users/xuhao/goproject/Aself/benthos-main/internal/impl 所有中间件实现类 todo\ngithub.com/cenkalti/backoff/v4@v4.2.1 backoff组件\ninternal/checkpoint/capped.go checkpoint调试\n","date":"2024-04-21T22:36:53+08:00","permalink":"http://localhost:1313/p/go-%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86/","title":"go-流式处理"},{"content":" # 官网 https://rustup.rs/\n# rust安装配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh # rust更新 rustup update # 卸载 rustup self uninstall # 版本 rustc --version # 文档 rustup doc # 编译 rustc main.rs # 开发工具 RustRover\nhttps://www.jetbrains.com.cn/rust/\n# cargo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 版本 cargo --version # 创建项目 cargo new project_name # 编译 cargo build cargo build --release # 构建并运行 cargo run # 检查是否通过编译 cargo check # 镜像加速 $HOME/.cargo/config.toml [registries] ustc = { index = \u0026#34;https://mirrors.ustc.edu.cn/crates.io-index/\u0026#34; } [source.crates-io] replace-with = \u0026#39;ustc\u0026#39; [source.ustc] registry = \u0026#34;git://mirrors.ustc.edu.cn/crates.io-index\u0026#34; # 依赖库 https://crates.io/\n# 参考文档 https://course.rs/about-book.html\n","date":"2024-04-19T14:42:10+08:00","permalink":"http://localhost:1313/p/rust%E5%9F%BA%E7%A1%80/","title":"rust基础"},{"content":" # 基础封装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 /************************************************************************* \u0026gt; File Name: csvData.go \u0026gt; Author: XuHao \u0026gt; Created Time: 2024/4/17 16:38 ************************************************************************/ package utils import ( \u0026#34;encoding/csv\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;reflect\u0026#34; ) type Book struct { ID string `shasha:\u0026#34;id\u0026#34;` Title string `shasha:\u0026#34;title\u0026#34;` Author string `shasha:\u0026#34;author\u0026#34;` Year string `shasha:\u0026#34;year\u0026#34;` } type Database struct { RootDir string } func NewDatabase(rootDir string) *Database { return \u0026amp;Database{ RootDir: rootDir, } } func (db *Database) CreateTable(databaseName, tableName string, data interface{}) error { tablePath := db.getFilePath(databaseName, tableName) err := MkDir(db.RootDir + \u0026#34;/\u0026#34; + databaseName) file, err := os.OpenFile(tablePath, os.O_CREATE|os.O_RDWR, 0644) if err != nil { return err } defer file.Close() writer := csv.NewWriter(file) defer writer.Flush() val := reflect.ValueOf(data) typ := reflect.TypeOf(data) var columns []string for i := 0; i \u0026lt; val.NumField(); i++ { tag := typ.Field(i).Tag.Get(\u0026#34;shasha\u0026#34;) columns = append(columns, tag) } err = writer.Write(columns) if err != nil { return err } log.Printf(\u0026#34;Table %s created successfully in database %s\\n\u0026#34;, tableName, databaseName) return nil } func (db *Database) getFilePath(databaseName, tableName string) string { return fmt.Sprintf(\u0026#34;%s/%s/%s.csv\u0026#34;, db.RootDir, databaseName, tableName) } func (db *Database) GetRow(databaseName, tableName, key, value string) ([]string, error) { file, err := os.Open(db.getFilePath(databaseName, tableName)) if err != nil { return nil, err } defer file.Close() reader := csv.NewReader(file) records, err := reader.ReadAll() if err != nil { return nil, err } for _, record := range records { if record[2] == value { return record, nil } } return nil, fmt.Errorf(\u0026#34;Row not found with key %s and value %s\u0026#34;, key, value) } func (db *Database) GetRows(databaseName, tableName string) ([][]string, error) { file, err := os.Open(db.getFilePath(databaseName, tableName)) if err != nil { return nil, err } defer file.Close() reader := csv.NewReader(file) records, err := reader.ReadAll() if err != nil { return nil, err } if len(records) == 0 { return nil, errors.New(\u0026#34;Rows not found\u0026#34;) } return records, nil } func (db *Database) DeleteRow(databaseName, tableName, key, value string) error { file, err := os.Open(db.getFilePath(databaseName, tableName)) if err != nil { return err } defer file.Close() records, err := db.getRecords(file) if err != nil { return err } var updatedRecords [][]string for _, record := range records { if record[2] != value { updatedRecords = append(updatedRecords, record) } } err = db.writeRecords(databaseName, tableName, updatedRecords) if err != nil { return err } return nil } func (db *Database) UpdateRow(databaseName, tableName, key, value string, newData []string) error { file, err := os.Open(db.getFilePath(databaseName, tableName)) if err != nil { return err } defer file.Close() records, err := db.getRecords(file) if err != nil { return err } var updatedRecords [][]string for _, record := range records { if record[2] == value { updatedRecords = append(updatedRecords, newData) } else { updatedRecords = append(updatedRecords, record) } } err = db.writeRecords(databaseName, tableName, updatedRecords) if err != nil { return err } return nil } // // writeRecords // @Description: 用于更新或删除 // @receiver db // @param databaseName // @param tableName // @param records // @return error // func (db *Database) writeRecords(databaseName, tableName string, records [][]string) error { file, err := os.OpenFile(db.getFilePath(databaseName, tableName), os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644) if err != nil { return err } defer file.Close() writer := csv.NewWriter(file) defer writer.Flush() for _, record := range records { err := writer.Write(record) if err != nil { return err } } return nil } // Insert // //\t@Description: 只插入单条 //\t@receiver db //\t@param databaseName //\t@param tableName //\t@param data //\t@return error func (db *Database) Insert(databaseName, tableName string, obj interface{}) error { tablePath := db.getFilePath(databaseName, tableName) file, err := os.OpenFile(tablePath, os.O_WRONLY|os.O_APPEND, 0644) if err != nil { return err } defer file.Close() writer := csv.NewWriter(file) defer writer.Flush() record := make([]string, 0) t := reflect.TypeOf(obj) v := reflect.ValueOf(obj) for i := 0; i \u0026lt; t.NumField(); i++ { record = append(record, v.Field(i).String()) } err = writer.Write(record) if err != nil { return err } fmt.Printf(\u0026#34;Data inserted successfully into table %s in database %s\\n\u0026#34;, tableName, databaseName) return nil } func (db *Database) getRecords(file *os.File) ([][]string, error) { reader := csv.NewReader(file) records, err := reader.ReadAll() if err != nil { return nil, err } return records, nil } # 测试用例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 /************************************************************************* \u0026gt; File Name: csvData_test.go \u0026gt; Author: XuHao \u0026gt; Created Time: 2024/4/17 16:44 ************************************************************************/ package utils import ( \u0026#34;fmt\u0026#34; \u0026#34;testing\u0026#34; ) func Test_main(t *testing.T) { db := NewDatabase(\u0026#34;.\u0026#34;) // //book := Book{ //\tID: \u0026#34;1\u0026#34;, //\tTitle: \u0026#34;Golang Programming\u0026#34;, //\tAuthor: \u0026#34;John Doe1\u0026#34;, //\tYear: \u0026#34;2021\u0026#34;, //} //err := db.CreateTable(\u0026#34;goLib\u0026#34;, \u0026#34;books\u0026#34;, book) //if err != nil { //\tfmt.Println(\u0026#34;Error creating table:\u0026#34;, err) //} //err = db.Insert(\u0026#34;goLib\u0026#34;, \u0026#34;books\u0026#34;, book) // 查询单条记录 row, err := db.GetRow(\u0026#34;goLib\u0026#34;, \u0026#34;books\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;John Doe\u0026#34;) if err != nil { fmt.Println(\u0026#34;Error querying row:\u0026#34;, err) } else { fmt.Println(\u0026#34;Single Row:\u0026#34;, row) } // //// 查询多条记录 //rows, err := db.GetRows(\u0026#34;library\u0026#34;, \u0026#34;books\u0026#34;, \u0026#34;author\u0026#34;, \u0026#34;John Doe\u0026#34;) //if err != nil { //\tfmt.Println(\u0026#34;Error querying rows:\u0026#34;, err) //} else { //\tfmt.Println(\u0026#34;Multiple Rows:\u0026#34;, rows) //} // // 更新记录 newData := []string{\u0026#34;1\u0026#34;, \u0026#34;Python Programming\u0026#34;, \u0026#34;Jane Doe4445\u0026#34;, \u0026#34;2023\u0026#34;} err = db.UpdateRow(\u0026#34;goLib\u0026#34;, \u0026#34;books\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;Jane Doe2\u0026#34;, newData) if err != nil { fmt.Println(\u0026#34;Error updating row:\u0026#34;, err) } // //// 删除记录 //err = db.DeleteRow(\u0026#34;goLib\u0026#34;, \u0026#34;books\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;John Doe1\u0026#34;) //if err != nil { //\tfmt.Println(\u0026#34;Error deleting row:\u0026#34;, err) //} } ","date":"2024-04-17T18:06:58+08:00","permalink":"http://localhost:1313/p/golang%E5%B0%81%E8%A3%85csv%E6%95%B0%E6%8D%AE%E5%BA%93/","title":"golang封装csv数据库"},{"content":" # 官网 https://elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#scroll-search-results\n# scroll上下文调整 scroll=1m 默认1min\n# scorll参数监控 1 2 3 4 5 6 7 # 集群 search.max_open_scroll_context 默认为500 search.max_keep_alive 默认为1d GET /_nodes/stats/indices/search # 索引 GET _cat/indices?h=index,health,status,store.size,cds,fm,sm,sc,pri,pri.store.size,rep,docs.deleted,indexing.index_failed,search.query_current,segments.index_writer_memory,searchOpenContexts # 清理scroll 1 2 3 4 5 6 7 8 9 DELETE /_search/scroll { \u0026#34;scroll_id\u0026#34; : [ \u0026#34;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==\u0026#34;, \u0026#34;DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB\u0026#34; ] } DELETE /_search/scroll/_all # slice切片 slice(doc) = floorMod(hashCode(doc._id), max))\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 GET /my-index-000001/_search?scroll=1m { \u0026#34;slice\u0026#34;: { \u0026#34;id\u0026#34;: 0, \u0026#34;max\u0026#34;: 2 }, \u0026#34;query\u0026#34;: { \u0026#34;match\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;foo\u0026#34; } } } GET /my-index-000001/_search?scroll=1m { \u0026#34;slice\u0026#34;: { \u0026#34;id\u0026#34;: 1, \u0026#34;max\u0026#34;: 2 }, \u0026#34;query\u0026#34;: { \u0026#34;match\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;foo\u0026#34; } } } ","date":"2024-04-16T18:20:09+08:00","permalink":"http://localhost:1313/p/es-scroll%E4%BC%98%E5%8C%96/","title":"es-scroll优化"},{"content":" # es-golang-benchmark https://github.com/elastic/go-elasticsearch/blob/main/_examples/bulk/benchmarks/benchmarks.go\nhttps://github.com/elastic/go-elasticsearch/blob/main/esutil/bulk_indexer_benchmark_test.go\n# benchmark代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 // Licensed to Elasticsearch B.V. under one or more contributor // license agreements. See the NOTICE file distributed with // this work for additional information regarding copyright // ownership. Elasticsearch B.V. licenses this file to you under // the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may // not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, // software distributed under the License is distributed on an // \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY // KIND, either express or implied. See the License for the // specific language governing permissions and limitations // under the License. //go:build !integration // +build !integration package esutil_test import ( \u0026#34;bytes\u0026#34; \u0026#34;context\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;github.com/elastic/go-elasticsearch/v8\u0026#34; \u0026#34;github.com/elastic/go-elasticsearch/v8/esutil\u0026#34; ) var mockResponseBody = `{ \u0026#34;took\u0026#34;: 30, \u0026#34;errors\u0026#34;: false, \u0026#34;items\u0026#34;: [ { \u0026#34;index\u0026#34;: { \u0026#34;_index\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;_version\u0026#34;: 1, \u0026#34;result\u0026#34;: \u0026#34;created\u0026#34;, \u0026#34;_shards\u0026#34;: { \u0026#34;total\u0026#34;: 2, \u0026#34;successful\u0026#34;: 1, \u0026#34;failed\u0026#34;: 0 }, \u0026#34;status\u0026#34;: 201, \u0026#34;_seq_no\u0026#34;: 0, \u0026#34;_primary_term\u0026#34;: 1 } } ] }` type mockTransp struct{} func (t *mockTransp) RoundTrip(req *http.Request) (*http.Response, error) { return \u0026amp;http.Response{Body: ioutil.NopCloser(strings.NewReader(mockResponseBody))}, nil // 1x alloc } func BenchmarkBulkIndexer(b *testing.B) { b.ReportAllocs() b.Run(\u0026#34;Basic\u0026#34;, func(b *testing.B) { b.ResetTimer() es, _ := elasticsearch.NewClient(elasticsearch.Config{Transport: \u0026amp;mockTransp{}}) bi, _ := esutil.NewBulkIndexer(esutil.BulkIndexerConfig{ Client: es, FlushBytes: 1024, }) defer bi.Close(context.Background()) docID := make([]byte, 0, 16) var docIDBuf bytes.Buffer docIDBuf.Grow(cap(docID)) for i := 0; i \u0026lt; b.N; i++ { docID = strconv.AppendInt(docID, int64(i), 10) docIDBuf.Write(docID) bi.Add(context.Background(), esutil.BulkIndexerItem{ Action: \u0026#34;index\u0026#34;, DocumentID: docIDBuf.String(), // 1x alloc Body: strings.NewReader(`{\u0026#34;foo\u0026#34;:\u0026#34;bar\u0026#34;}`), // 1x alloc }) docID = docID[:0] docIDBuf.Reset() } }) } ","date":"2024-04-16T12:03:16+08:00","permalink":"http://localhost:1313/p/es-golang-benchmark/","title":"es-golang-benchmark"},{"content":" # enrich操作 # 定义policy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 PUT _enrich/policy/enrich-city { \u0026#34;match\u0026#34;: { \u0026#34;indices\u0026#34;: \u0026#34;city-index\u0026#34;, \u0026#34;match_field\u0026#34;: \u0026#34;city\u0026#34;, \u0026#34;enrich_fields\u0026#34;: [ \u0026#34;district\u0026#34; ] } } PUT _enrich/policy/enrich-district { \u0026#34;match\u0026#34;: { \u0026#34;indices\u0026#34;: \u0026#34;district-index\u0026#34;, \u0026#34;match_field\u0026#34;: \u0026#34;district\u0026#34;, \u0026#34;enrich_fields\u0026#34;: [\u0026#34;place\u0026#34;] } } # 执行policy 1 2 PUT _enrich/policy/enrich-district/_execute PUT _enrich/policy/enrich-city/_execute # ingest pipeline添加 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 PUT _ingest/pipeline/enrich-city { \u0026#34;description\u0026#34;: \u0026#34;Enrich demo\u0026#34;, \u0026#34;processors\u0026#34;: [ { \u0026#34;enrich\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;policy_name\u0026#34;: \u0026#34;enrich-city\u0026#34;, \u0026#34;field\u0026#34;: \u0026#34;city\u0026#34;, \u0026#34;target_field\u0026#34;: \u0026#34;enrich-city\u0026#34;, \u0026#34;max_matches\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;ignore_failure\u0026#34;: true } }, { \u0026#34;enrich\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;demo1\u0026#34;, \u0026#34;policy_name\u0026#34;: \u0026#34;enrich-district\u0026#34;, \u0026#34;field\u0026#34;: \u0026#34;enrich-city.district\u0026#34;, \u0026#34;target_field\u0026#34;: \u0026#34;enrich-place\u0026#34;, \u0026#34;max_matches\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;ignore_failure\u0026#34;: true } } ] } # 插入文档 1 2 3 4 POST country-index/_doc?pipeline=enrich-city { \u0026#34;city\u0026#34;:\u0026#34;cq\u0026#34; } # 转换后 ","date":"2024-04-16T11:51:41+08:00","permalink":"http://localhost:1313/p/enrich%E6%93%8D%E4%BD%9C/","title":"enrich操作"},{"content":" # filebeat源码解析 1 https://github.com/elastic/beats/blob/main/filebeat/beater/filebeat.go # 流程图 ","date":"2024-04-15T22:29:39+08:00","permalink":"http://localhost:1313/p/filebeat%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/","title":"filebeat源码解析"},{"content":" # hugo部署 # 初始化 https://github.com/judddd/factory011.github.io\n# theme bug 1 2 3 4 5 hugo/themes/even/layouts/partials/head.html 然后移除这行代码： {{- template \u0026#34;_internal/google_news.html\u0026#34; . -}} # MarsEdit api扩展 1 2 3 4 5 6 7 8 https://github.com/elliotekj/orbit ruby app/orbit.rb -s ~/blog -u \u0026#34;cd ~/blog \u0026amp;\u0026amp; hugo\u0026#34; 首先，在终端运行您的 Ruby 程序，并按下 Ctrl + Z 将其暂停（停止）。 然后，运行 bg 命令将程序放在后台运行： bg disown # 定制化 https://blog.csdn.net/qq_37908043/article/details/93350094\n# 参考文档 https://stack.jimmycai.com/config/menu\n# 最终 https://gitee.com/judddd/xuhao-hugo\n","date":"2024-04-15T20:40:02+08:00","permalink":"http://localhost:1313/p/hugo%E9%83%A8%E7%BD%B2/","title":"hugo部署"},{"content":"base页面\n","date":"2024-04-14T23:37:39+08:00","permalink":"http://localhost:1313/p/base/","title":"base"}]